{"version":3,"sources":["App.tsx","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","index.tsx"],"names":["TodoCase","TodoList","todos","selectUserId","handleChange","handleSelectChange","selectValue","query","className","htmlFor","type","name","id","value","onChange","length","map","todo","cn","TodoList__item","completed","checked","readOnly","title","onClick","userId","BASE_URL","getTodos","a","fetch","response","json","getUser","CurrentUser","selectedUser","useState","user","setUser","useEffect","then","email","phone","App","selectedUserId","setSelectedUserId","setTodos","setQuery","setSelectValue","event","target","queryCase","toLowerCase","preparedTodos","filter","includes","Completed","Not","getPreparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd8de26a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nenum TodoCase {\n  Completed = 'completed',\n  Not = 'not',\n}\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectValue, setSelectValue] = useState<string>('all');\n\n  useEffect(() => {\n    getTodos().then(setTodos);\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectValue(value);\n  };\n\n  const getPreparedTodos = () => {\n    const queryCase = query.toLowerCase();\n\n    const preparedTodos = todos.filter(todo => (\n      todo.title.toLowerCase().includes(queryCase)\n    ));\n\n    switch (selectValue) {\n      case TodoCase.Completed:\n        return preparedTodos.filter(todo => todo.completed);\n      case TodoCase.Not:\n\n        return preparedTodos.filter(todo => !todo.completed);\n      default:\n        return preparedTodos;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          handleChange={handleChange}\n          handleSelectChange={handleSelectChange}\n          todos={getPreparedTodos()}\n          selectUserId={setSelectedUserId}\n          query={query}\n          selectValue={selectValue}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectedUser={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport cn from 'classnames';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectUserId: (userId: number) => void,\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  handleSelectChange: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  selectValue: string,\n  query: string,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUserId,\n  handleChange,\n  handleSelectChange,\n  selectValue,\n  query,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <label htmlFor=\"input\">\n      Filter by Title:\n      {' '}\n      <input\n        type=\"text\"\n        name=\"input\"\n        id=\"input\"\n        value={query}\n        onChange={handleChange}\n      />\n      <select\n        name=\"select\"\n        id=\"select\"\n        value={selectValue}\n        onChange={handleSelectChange}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"completed\">Completed</option>\n        <option value=\"not\">Not completed</option>\n      </select>\n    </label>\n    {todos.length ? (\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={cn({\n                TodoList__item: true,\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label htmlFor=\"todoLabelId\">\n                <input\n                  id=\"todoLabelId\"\n                  checked={todo.completed}\n                  type=\"checkbox\"\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                onClick={() => {\n                  selectUserId(todo.userId);\n                }}\n                className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\n          \"\n                type=\"button\"\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    ) : <p>Please wait, loading...</p>}\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  selectedUser: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  selectedUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId).then(setUser);\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:&nbsp;\n              {userId}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear button\"\n            onClick={() => selectedUser(0)}\n          >\n            Clear\n          </button>\n        </>\n      ) : (\n        <p>Loading....</p>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}