{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","App.tsx","components/CurrentUser/CurrentUser.tsx","index.tsx"],"names":["TodoList","todos","selectUserId","handleChange","handleSelectChange","selectValue","query","className","htmlFor","type","name","id","value","onChange","length","map","todo","cn","TodoList__item","completed","checked","readOnly","title","onClick","userId","request","endpoint","fetch","then","response","TodoStatus","CurrentUser","selectedUser","useState","user","setUser","userError","setUserError","useEffect","endPoint","getUser","a","ok","json","email","phone","App","selectedUserId","setSelectedUserId","setTodos","setQuery","setSelectValue","isLoading","setIsLoading","serverError","setServerError","loading","getServerError","catch","event","target","queryCase","toLowerCase","preparedTodos","filter","includes","Completed","NotCompleted","getPreparedTodos","ReactDOM","render","document","getElementById"],"mappings":"iVAcaA,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MACAC,EAFuC,EAEvCA,aACAC,EAHuC,EAGvCA,aACAC,EAJuC,EAIvCA,mBACAC,EALuC,EAKvCA,YACAC,EANuC,EAMvCA,MANuC,OAQvC,sBAAKC,UAAU,WAAf,UACE,wCACA,wBAAOC,QAAQ,QAAf,6BAEG,IACD,uBACEC,KAAK,OACLC,KAAK,QACLC,GAAG,QACHC,MAAON,EACPO,SAAUV,IAEZ,yBACEO,KAAK,SACLC,GAAG,SACHC,MAAOP,EACPQ,SAAUT,EAJZ,UAME,wBAAQQ,MAAM,MAAd,iBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,MAAd,iCAGHX,EAAMa,OACL,qBAAKP,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGN,EAAMc,KAAI,SAAAC,GAAI,OACb,qBAEET,UAAWU,IAAG,CACZC,gBAAgB,EAChB,6BAA8BF,EAAKG,UACnC,0BAA2BH,EAAKG,YALpC,UAQE,wBAAOX,QAAQ,cAAf,UACE,uBACEG,GAAG,cACHS,QAASJ,EAAKG,UACdV,KAAK,WACLY,UAAQ,IAEV,4BAAIL,EAAKM,WAGX,yBACEC,QAAS,WACPrB,EAAac,EAAKQ,SAEpBjB,UAAU,iEAKVE,KAAK,SATP,sBAYGO,EAAKQ,YA7BHR,EAAKL,WAmChB,4DCnFFc,EAAU,SAACC,GACf,OACEC,MAAM,GAAD,OAJQ,qCAIR,OAAeD,IACjBE,MAAK,SAAAC,GACJ,OAAOA,M,UCCVC,ECEQC,EAA+B,SAAC,GAGtC,IAFLP,EAEI,EAFJA,OACAQ,EACI,EADJA,aAEA,EAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAkB,GAApD,mBAAOG,EAAP,KAAkBC,EAAlB,KAaA,OAXAC,qBAAU,YFCL,SAAiBd,GACtB,IAAMe,EAAQ,iBAAaf,GAE3B,OACEC,EAAQc,IEJRC,CAAQhB,GAAQI,KAAhB,uCAAqB,WAAMC,GAAN,SAAAY,EAAA,0DACfZ,EAASa,GADM,uBAEjBP,EAAQ,MAFS,KAGjBA,EAHiB,SAGHN,EAASc,OAHN,yDAKjBN,GAAa,GALI,4CAArB,yDAQC,CAACb,IAGF,qBAAKjB,UAAU,cAAf,SACG6B,EACC,8CAEA,mCACGF,EACC,qCACE,oBAAI3B,UAAU,qBAAd,SACE,sDAEGiB,OAIL,oBAAIjB,UAAU,oBAAd,SAAmC2B,EAAKxB,OACxC,mBAAGH,UAAU,qBAAb,SAAmC2B,EAAKU,QACxC,mBAAGrC,UAAU,qBAAb,SAAmC2B,EAAKW,QAExC,wBACEpC,KAAK,SACLF,UAAU,4BACVgB,QAAS,kBAAMS,EAAa,IAH9B,sBASF,kD,SDhDPF,K,sBAAAA,E,oBAAAA,M,KAKL,IAiGegB,EAjGO,WACpB,MAA4Cb,mBAAS,GAArD,mBAAOc,EAAP,KAAuBC,EAAvB,KACA,EAA0Bf,mBAAiB,IAA3C,mBAAOhC,EAAP,KAAcgD,EAAd,KACA,EAA0BhB,mBAAS,IAAnC,mBAAO3B,EAAP,KAAc4C,EAAd,KACA,EAAsCjB,mBAAiB,OAAvD,mBAAO5B,EAAP,KAAoB8C,EAApB,KACA,EAAkClB,oBAAkB,GAApD,mBAAOmB,EAAP,KAAkBC,EAAlB,KACA,EAAsCpB,oBAAkB,GAAxD,mBAAOqB,EAAP,KAAoBC,EAApB,KAEMC,EAAU,WACdH,GAAa,IAGTI,EAAiB,WACrBF,GAAe,IAGjBjB,qBAAU,WDfRb,EAAQ,UCgBGG,KAAX,uCAAgB,WAAMC,GAAN,SAAAY,EAAA,0DACVZ,EAASa,GADC,4BAEZO,EAFY,SAEGpB,EAASc,OAFZ,wDAIZY,GAAe,GAJH,2CAAhB,uDAOG3B,KAAK4B,GACLE,MAAMD,KACR,IAgCH,OACE,qBAAKlD,UAAU,MAAf,SACG+C,EACC,gDAEA,mCACGF,EACC,qCACE,qBAAK7C,UAAU,eAAf,SACE,cAAC,EAAD,CACEJ,aAxCK,SAACwD,GACpB,IAAQ/C,EAAU+C,EAAMC,OAAhBhD,MAERsC,EAAStC,IAsCKR,mBAnCW,SAACuD,GAC1B,IAAQ/C,EAAU+C,EAAMC,OAAhBhD,MAERuC,EAAevC,IAiCDX,MA9BS,WACvB,IAAM4D,EAAYvD,EAAMwD,cAElBC,EAAgB9D,EAAM+D,QAAO,SAAAhD,GAAI,OACrCA,EAAKM,MAAMwC,cAAcG,SAASJ,MAGpC,OAAQxD,GACN,KAAKyB,EAAWoC,UACd,OAAOH,EAAcC,QAAO,SAAAhD,GAAI,OAAIA,EAAKG,aAC3C,KAAKW,EAAWqC,aAEd,OAAOJ,EAAcC,QAAO,SAAAhD,GAAI,OAAKA,EAAKG,aAC5C,QACE,OAAO4C,GAgBUK,GACPlE,aAAc8C,EACd1C,MAAOA,EACPD,YAAaA,MAIjB,qBAAKE,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGwC,EACC,cAAC,EAAD,CACEvB,OAAQuB,EACRf,aAAcgB,IAEd,0BAKV,gDElGZqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.72e69108.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectUserId: (userId: number) => void,\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  handleSelectChange: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  selectValue: string,\n  query: string,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUserId,\n  handleChange,\n  handleSelectChange,\n  selectValue,\n  query,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <label htmlFor=\"input\">\n      Filter by Title:\n      {' '}\n      <input\n        type=\"text\"\n        name=\"input\"\n        id=\"input\"\n        value={query}\n        onChange={handleChange}\n      />\n      <select\n        name=\"select\"\n        id=\"select\"\n        value={selectValue}\n        onChange={handleSelectChange}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"completed\">Completed</option>\n        <option value=\"not\">Not completed</option>\n      </select>\n    </label>\n    {todos.length ? (\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={cn({\n                TodoList__item: true,\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label htmlFor=\"todoLabelId\">\n                <input\n                  id=\"todoLabelId\"\n                  checked={todo.completed}\n                  type=\"checkbox\"\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                onClick={() => {\n                  selectUserId(todo.userId);\n                }}\n                className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\n          \"\n                type=\"button\"\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    ) : <p>Please wait, loading...</p>}\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (endpoint: string) => {\n  return (\n    fetch(`${BASE_URL}${endpoint}`)\n      .then(response => {\n        return response;\n      })\n  );\n};\n\nexport function getTodos() {\n  return (\n    request('/todos')\n  );\n}\n\nexport function getUser(userId: number) {\n  const endPoint = `/users/${userId}`;\n\n  return (\n    request(endPoint)\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nenum TodoStatus {\n  Completed = 'completed',\n  NotCompleted = 'not',\n}\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectValue, setSelectValue] = useState<string>('all');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [serverError, setServerError] = useState<boolean>(false);\n\n  const loading = () => {\n    setIsLoading(true);\n  };\n\n  const getServerError = () => {\n    setServerError(true);\n  };\n\n  useEffect(() => {\n    getTodos().then(async response => {\n      if (response.ok) {\n        setTodos(await response.json());\n      } else {\n        setServerError(true);\n      }\n    })\n      .then(loading)\n      .catch(getServerError);\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectValue(value);\n  };\n\n  const getPreparedTodos = () => {\n    const queryCase = query.toLowerCase();\n\n    const preparedTodos = todos.filter(todo => (\n      todo.title.toLowerCase().includes(queryCase)\n    ));\n\n    switch (selectValue) {\n      case TodoStatus.Completed:\n        return preparedTodos.filter(todo => todo.completed);\n      case TodoStatus.NotCompleted:\n\n        return preparedTodos.filter(todo => !todo.completed);\n      default:\n        return preparedTodos;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {serverError ? (\n        <p>Server error...</p>\n      ) : (\n        <>\n          {isLoading ? (\n            <>\n              <div className=\"App__sidebar\">\n                <TodoList\n                  handleChange={handleChange}\n                  handleSelectChange={handleSelectChange}\n                  todos={getPreparedTodos()}\n                  selectUserId={setSelectedUserId}\n                  query={query}\n                  selectValue={selectValue}\n                />\n              </div>\n\n              <div className=\"App__content\">\n                <div className=\"App__content-container\">\n                  {selectedUserId ? (\n                    <CurrentUser\n                      userId={selectedUserId}\n                      selectedUser={setSelectedUserId}\n                    />\n                  ) : 'No user selected'}\n                </div>\n              </div>\n            </>\n          ) : (\n            <p>Loading...</p>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  selectedUser: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  selectedUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [userError, setUserError] = useState<boolean>(false);\n\n  useEffect(() => {\n    getUser(userId).then(async response => {\n      if (response.ok) {\n        setUser(null);\n        setUser(await response.json());\n      } else {\n        setUserError(true);\n      }\n    });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {userError ? (\n        <p>User error...</p>\n      ) : (\n        <>\n          {user ? (\n            <>\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:&nbsp;\n                  {userId}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{user.name}</h3>\n              <p className=\"CurrentUser__email\">{user.email}</p>\n              <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n              <button\n                type=\"button\"\n                className=\"CurrentUser__clear button\"\n                onClick={() => selectedUser(0)}\n              >\n                Clear\n              </button>\n            </>\n          ) : (\n            <p>Loading....</p>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}